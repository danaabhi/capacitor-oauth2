{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface GenericOAuth2Plugin {\r\n  /**\r\n   * Authenticate against a OAuth 2 provider.\r\n   * @param {OAuth2AuthenticateOptions} options\r\n   * @returns {Promise<any>} the resource url response\r\n   */\r\n  authenticate(options: OAuth2AuthenticateOptions): Promise<any>;\r\n  /**\r\n   * Get a new access token based on the given refresh token.\r\n   * @param {OAuth2RefreshTokenOptions} options\r\n   * @returns {Promise<any>} the token endpoint response\r\n   */\r\n  refreshToken(options: OAuth2RefreshTokenOptions): Promise<any>;\r\n  /**\r\n   * Logout from the authenticated OAuth 2 provider\r\n   * @param {OAuth2AuthenticateOptions} options Although not all options are needed. We simply reuse the options from authenticate\r\n   * @param {String} id_token Optional idToken, only for Android\r\n   * @returns {Promise<boolean>} true if the logout was successful else false.\r\n   */\r\n  logout(\r\n    options: OAuth2AuthenticateOptions,\r\n    id_token?: string,\r\n  ): Promise<boolean>;\r\n}\r\n\r\nexport interface OAuth2RefreshTokenOptions {\r\n  /**\r\n   * The app id (client id) you get from the oauth provider like Google, Facebook,...\r\n   */\r\n  appId: string;\r\n  /**\r\n   * Url for retrieving the access_token.\r\n   */\r\n  accessTokenEndpoint: string;\r\n  /**\r\n   * The refresh token that will be used to obtain the new access token.\r\n   */\r\n  refreshToken: string;\r\n  /**\r\n   * A space-delimited list of permissions that identify the resources that your application could access on the user's behalf.\r\n   */\r\n  scope?: string;\r\n}\r\n\r\nexport interface OAuth2AuthenticateBaseOptions {\r\n  /**\r\n   * The app id (client id) you get from the oauth provider like Google, Facebook,...\r\n   *\r\n   * required!\r\n   */\r\n  appId?: string;\r\n  /**\r\n   * The base url for retrieving tokens depending on the response type from a OAuth 2 provider. e.g. https://accounts.google.com/o/oauth2/auth\r\n   *\r\n   * required!\r\n   */\r\n  authorizationBaseUrl?: string;\r\n  /**\r\n   * Tells the authorization server which grant to execute. Be aware that a full code flow is not supported as clientCredentials are not included in requests.\r\n   *\r\n   * But you can retrieve the authorizationCode if you don't set a accessTokenEndpoint.\r\n   *\r\n   * required!\r\n   */\r\n  responseType?: string;\r\n  /**\r\n   * Url to  which the oauth provider redirects after authentication.\r\n   *\r\n   * required!\r\n   */\r\n  redirectUrl?: string;\r\n  /**\r\n   * Url for retrieving the access_token by the authorization code flow.\r\n   */\r\n  accessTokenEndpoint?: string;\r\n  /**\r\n   * Protected resource url. For authentication you only need the basic user details.\r\n   */\r\n  resourceUrl?: string;\r\n  /**\r\n   * Enable PKCE if you need it.\r\n   */\r\n  pkceEnabled?: boolean;\r\n  /**\r\n   * A space-delimited list of permissions that identify the resources that your application could access on the user's behalf.\r\n   * If you want to get a refresh token, you most likely will need the offline_access scope (only supported in Code Flow!)\r\n   */\r\n  scope?: string;\r\n  /**\r\n   * A unique alpha numeric string used to prevent CSRF. If not set the plugin automatically generate a string\r\n   * and sends it as using state is recommended.\r\n   */\r\n  state?: string;\r\n  /**\r\n   * Additional parameters for the created authorization url\r\n   */\r\n  additionalParameters?: { [key: string]: string };\r\n  /**\r\n   * @since 3.0.0\r\n   */\r\n  logsEnabled?: boolean;\r\n  /**\r\n   * @since 3.1.0 ... not implemented yet!\r\n   */\r\n  logoutUrl?: string;\r\n\r\n  /**\r\n   * Additional headers for resource url request\r\n   * @since 3.0.0\r\n   */\r\n  additionalResourceHeaders?: { [key: string]: string };\r\n}\r\n\r\nexport interface OAuth2AuthenticateOptions\r\n  extends OAuth2AuthenticateBaseOptions {\r\n  /**\r\n   * Custom options for the platform \"web\"\r\n   */\r\n  web?: WebOption;\r\n  /**\r\n   * Custom options for the platform \"android\"\r\n   */\r\n  android?: AndroidOptions;\r\n  /**\r\n   * Custom options for the platform \"ios\"\r\n   */\r\n  ios?: IosOptions;\r\n}\r\n\r\nexport interface WebOption extends OAuth2AuthenticateBaseOptions {\r\n  /**\r\n   * Options for the window the plugin open for authentication. e.g. width=500,height=600,left=0,top=0\r\n   */\r\n  windowOptions?: string;\r\n  /**\r\n   * Options for the window target. Defaults to _blank\r\n   */\r\n  windowTarget?: string;\r\n}\r\n\r\nexport interface AndroidOptions extends OAuth2AuthenticateBaseOptions {\r\n  /**\r\n   * Some oauth provider especially Facebook forces us to use their SDK for apps.\r\n   *\r\n   * Provide a class name implementing the 'CapacitorCommunityGenericOAuth2.OAuth2CustomHandler' protocol.\r\n   */\r\n  customHandlerClass?: string;\r\n  /**\r\n   * Alternative to handle the activity result. The `onNewIntent` method is only call if the App was killed while logging in.\r\n   */\r\n  handleResultOnNewIntent?: boolean;\r\n  /**\r\n   * Default handling the activity result.\r\n   */\r\n  handleResultOnActivityResult?: boolean;\r\n}\r\n\r\nexport interface IosOptions extends OAuth2AuthenticateBaseOptions {\r\n  /**\r\n   * If true the iOS 13+ feature Sign in with Apple (SiWA) try to build the scope from the standard \"scope\" parameter.\r\n   *\r\n   * If false scope is set to email and fullName.\r\n   */\r\n  siwaUseScope?: boolean;\r\n  /**\r\n   * Some oauth provider especially Facebook forces us to use their SDK for apps.\r\n   *\r\n   * Provide a class name implementing the 'CapacitorCommunityGenericOAuth2.OAuth2CustomHandler' protocol.\r\n   */\r\n  customHandlerClass?: string;\r\n}\r\n"]}